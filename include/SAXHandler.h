/*
* Part of the Aeon Framework
* -----------------------------------------------------------------------------
* Aeon Expat XML Wrapper.
*
* File:		SAXHandler.h
  Desc.:	Very basic example implementation of the SAXHandler Interface.
* Author:	Felix Bruckner <xography@gatewayheaven.com>
*
* Copyright (c) 2009-2010, gatewayheaven.com. 
* Licensed under the Boost Software License.
*
* -----------------------------------------------------------------------------
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
* 
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
* -----------------------------------------------------------------------------
*/
#ifndef _SAXHandler_h_
#define _SAXHandler_h_
#include "SAXHandlerAdapter.h"

#include "XMLString.h"
#include "XMLAttributes.h"

namespace Aeon {
	
	/** 
	 * An abstract class, making example usage of the SAXHandlerInterface (and the 
	 * SAXHandlerAdapter). This implementation wraps the Char Arrays nicely
	 * into (std::)Strings (called XMLString) and Attributes into Attribute-Lists
	 * (std::vector based). This comes at the cost of speed, of course, but saves
	 * the user from implementing an own Handler using the Raw data.
	 * @remarks This Handler is non-validating, it is only able to read XML Elements
	 * and their attributes, CharacterData (Between tags), comments and CData. 
	 * Warning: UTF-8 is supported, whereas UTF-16 support would require a 
	 * re-implementation of the XMLString class to use std::wstring!
	 */ 
	class SAXHandler : public SAXHandlerAdapter {
	public:
		// Receivers to wrap the data into a more convenient format
		void _StartElement(const XML_Char *name, const XML_Char **atts);
		void _EndElement(const XML_Char *name);
		void _CharacterData(const XML_Char *s, int len);
		void _ProcessingInstruction(const XML_Char *target, const XML_Char *data);
		void _CommentData(const XML_Char *data);
		void _CDataStart(void);
		void _CDataEnd(void);

		// Abstract functions

		/**
		 * Start of an element tag.
		 *
		 * @param name the name of the tag.
		 * @param attributes the attributes, accessible via .get(<Name>)
		 */ 
		virtual void startElement(const XMLString& name, 
			const XMLAttributes& attributes) = 0;

		/**
		 * End of an element tag.
		 *
		 * @param name the name of the element.
		 */ 
		virtual void endElement(const XMLString& name) = 0;

		/**
		 * CharacterData, usually text between XML tags.
		 *
		 * @param data the data, still contains whitespaces.
		 */ 
		virtual void characterData(const XMLString &data) = 0;
		
		/**
		 * Processing Instructions.
		 *
		 * @param target the instructions' target.
		 * @param data the instruction data.
		 */ 
		virtual void processingInstruction(const XMLString& target,
			const XMLString& data) { }

		/**
		 * A XML Comment.
		 *
		 * @param data the comment's contents
		 */ 
		virtual void commentData(const XMLString& data) { }

		/**
		 * Marks the start of a CDATA Tag.
		 */ 
		virtual void startCData(void) { }

		/**
		 * Marks the end of a CDATA Tag.
		 */ 
		virtual void endCData(void) { }

	private:
		XMLAttributes _attributes;
	};
}
#endif