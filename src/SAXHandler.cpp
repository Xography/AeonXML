/*
* Part of the Aeon Framework
* -----------------------------------------------------------------------------
* Aeon Expat XML Wrapper.
*
* File:		SAXHandler.cpp
  Desc.:	SAX Handler Example implementation.
* Author:	Felix Bruckner <xography@gatewayheaven.com>
*
* Copyright (c) 2009-2010, gatewayheaven.com. 
* Licensed under the Boost Software License.
*
* -----------------------------------------------------------------------------
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
* 
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
* -----------------------------------------------------------------------------
*/

#include "SAXHandler.h"
#include <algorithm>

namespace Aeon {
	
	// ------------------------------------------------------------------------
	void SAXHandler::_StartElement(const XML_Char *name, const XML_Char **atts) {
		
		 _attributes.clear();
		
		for (int i = 0; *atts; ++i) {
			const XML_Char* attrName  = *atts++;
			const XML_Char* attrValue = *atts++;

			_attributes.insert(attrName, attrValue);
		}
		
		startElement(XMLString(name), _attributes);
	}
	
	// ------------------------------------------------------------------------
	void SAXHandler::_EndElement(const XML_Char *name) {
		endElement(XMLString(name));
	}
	
	// ------------------------------------------------------------------------
	void SAXHandler::_CharacterData(const XML_Char *s, int len) {
		XMLString data(s, len);
		characterData(data);
	}

	// ------------------------------------------------------------------------
	void SAXHandler::_ProcessingInstruction(const XML_Char *target, 
		const XML_Char *data) {
		processingInstruction(XMLString(target), XMLString(data));
	}

	// ------------------------------------------------------------------------
	void SAXHandler::_CommentData(const XML_Char *data) {
		commentData(XMLString(data));
	}

	// ------------------------------------------------------------------------
	void SAXHandler::_CDataStart(void) {
		startCData();
	}

	// ---------------------------------------------------------------------------
	void SAXHandler::_CDataEnd(void)  {
		endCData();
	}
}